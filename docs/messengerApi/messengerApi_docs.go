// Package messengerApi Code generated by swaggo/swag. DO NOT EDIT
package messengerApi

import "github.com/swaggo/swag"

const docTemplatemessengerApi = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Retrieves all messenger messages with pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MessengerAPI"
                ],
                "summary": "Get All Messages",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items to retrieve",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of items to skip",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages under field of 'data'",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.BaseResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    }
                }
            }
        },
        "/commit/{messageId}": {
            "put": {
                "description": "Commits a messenger message based on the provided message ID, if success, changes the message status to sent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MessengerAPI"
                ],
                "summary": "Commit a Message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the message to commit",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message committed successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid message ID",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    }
                }
            }
        },
        "/get-two": {
            "get": {
                "description": "Retrieves two messenger messages based on the provided offset, tailored for the Messenger Job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MessengerAPI"
                ],
                "summary": "Get Two Messages for Messenger Job",
                "parameters": [
                    {
                        "minimum": -1,
                        "type": "integer",
                        "description": "Offset for retrieving messages",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of two messages, projection of 'to' and 'content'",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.BaseResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    }
                }
            }
        },
        "/messenger-job-toggle": {
            "get": {
                "description": "Starts or stops the Messenger Job based on the provided command by sending http requests to the job scheduler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MessengerAPI"
                ],
                "summary": "Toggle Messenger Job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Command to toggle job. Use 'start' or 'stop'",
                        "name": "command",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job toggled successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid command parameter",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/pkg.BaseResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "pkg.BaseResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "internalCode": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfomessengerApi holds exported Swagger Info so clients can modify it
var SwaggerInfomessengerApi = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/messenger",
	Schemes:          []string{},
	Title:            "Messenger API",
	Description:      "This is the documentation for the Messenger API.",
	InfoInstanceName: "messengerApi",
	SwaggerTemplate:  docTemplatemessengerApi,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfomessengerApi.InstanceName(), SwaggerInfomessengerApi)
}
